@inject ApiSettings ApiSettings

@page "/showproducts"

@using Microsoft.AspNetCore.Components.Web
@using BlazorSportStoreAuth.Models
@using BlazorSportStoreAuth.Services
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject CartService CartService
@inject IJSRuntime JS

@using System.Text.Json
<h3>Products</h3>

<!-- Category Dropdown -->
<div>
    <label for="category">Category:</label>
    <select id="category" @bind="category">
        <option value="">All</option>
        @foreach (var cat in categories)
        {
            <option value="@cat">@cat</option>
        }
    </select>
</div>

<!-- Product List -->
<div class="product-container">
    @foreach (var product in filteredProducts)
    {
        <div class="product-card">
            <img src="@GetImageUrl(product.image)" alt="@product.Name">
            <h5>@product.Name</h5>
            <p>@product.Price.ToString("C2")</p>
            <button @onclick="() => AddToCart(product)">Add to Cart</button>
        </div>
    }
</div>

@code {
    private List<Product> products = new();
    private List<Product> filteredProducts = new();
    private HashSet<string> categories = new();
    private string category = "";
    private string apiBase = "";
    private string fullApiUrl = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadApiSettings();
        fullApiUrl = $"{apiBase}/data-api/rest/Products";
        Console.WriteLine($"Using API URL: {fullApiUrl}");
        await FetchProducts();
    }

    private async Task LoadApiSettings()
    {
        try
        {
            var response = await HttpClient.GetAsync("appsettings.json");
            var config = await response.Content.ReadAsStringAsync();
            var jsonDoc = JsonDocument.Parse(config);
            apiBase = jsonDoc.RootElement.GetProperty("ApiBaseUrl").GetString();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading API settings: {ex.Message}");
        }
    }

    private async Task FetchProducts()
    {
        try
        {
            var response = await HttpClient.GetAsync(fullApiUrl);
            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"API Response: {responseBody}");

            if (response.IsSuccessStatusCode)
            {
                var deserializedResponse = JsonSerializer.Deserialize<Dictionary<string, List<Product>>>(responseBody,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (deserializedResponse != null && deserializedResponse.ContainsKey("value"))
                {
                    products = deserializedResponse["value"];
                    categories = products.Select(p => p.Category).Where(c => !string.IsNullOrEmpty(c)).ToHashSet();
                    FilterProducts();
                }
                else
                {
                    Console.Error.WriteLine("Unexpected JSON structure.");
                }
            }
            else
            {
                Console.Error.WriteLine($"API Error: {response.StatusCode} - {responseBody}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    private void FilterProducts()
    {
        filteredProducts = string.IsNullOrEmpty(category)
            ? products
            : products.Where(p => p.Category == category).ToList();
        StateHasChanged();
    }

    private void AddToCart(Product product)
    {
        Console.WriteLine($"Added {product.Name} to cart.");
        // Implement cart logic
    }

    private string GetImageUrl(string imagePath)
    {
        return string.IsNullOrWhiteSpace(imagePath) ? "/img/default.jpg" : imagePath;
    }
    
}
