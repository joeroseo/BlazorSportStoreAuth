@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@using BlazorSportStoreAuth.Services.Authentication
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject IJSRuntime JS

<style>
    .login-container {
        max-width: 400px;
        margin: auto;
        padding: 20px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

    .form-control {
        font-size: 16px;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 8px;
        margin-bottom: 15px;
        display: block;
        width: 100%;
        box-sizing: border-box;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
        padding: 12px;
        font-size: 18px;
        width: 100%;
        border-radius: 8px;
        color: white;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .alert-danger {
        color: white;
        background-color: #dc3545;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
    }
</style>

<h3 class="text-center mt-4">@(isLoginMode ? "Login" : "Register")</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert-danger text-center">@errorMessage</div>
}

<div class="login-container">
    <EditForm EditContext="@editContext" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email"><strong>Email</strong></label>
            <InputText id="email" class="form-control" @bind-Value="email" placeholder="Enter your email" />
        </div>

        <div class="form-group">
            <label for="password"><strong>Password</strong></label>
            <InputText id="password" type="password" class="form-control" @bind-Value="password" placeholder="Enter your password" />
        </div>

        @if (!isLoginMode)
        {
            <div class="form-group">
                <label for="confirmPassword"><strong>Confirm Password</strong></label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" placeholder="Confirm your password" />
            </div>
        }

        <div class="form-group text-center mt-3">
            <button type="submit" class="btn-primary" disabled="@isLoading">
                @(isLoading ? "Processing..." : isLoginMode ? "Login" : "Register")
            </button>
        </div>
    </EditForm>

    <p class="text-center mt-3">
        @(isLoginMode ? "Don't have an account?" : "Already have an account?")
        <button @onclick="ToggleAuthMode" class="btn-link">
            @(isLoginMode ? "Register here" : "Login here")
        </button>
    </p>
</div>

@code {
    private bool isLoginMode = true;
    private bool isLoading = false;
    private string email = "";
    private string password = "";
    private string confirmPassword = "";
    private string errorMessage = "";
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(this);
    }

    private void ToggleAuthMode()
    {
        isLoginMode = !isLoginMode;
        errorMessage = string.Empty;
    }

    private async Task HandleSubmit()
    {
        isLoading = true;
        errorMessage = string.Empty;

        if (isLoginMode)
        {
            await HandleLogin();
        }
        else
        {
            await HandleRegistration();
        }

        isLoading = false;
    }

    private async Task HandleLogin()
    {
        var success = await AuthService.LoginAsync(email, password);
        if (success)
        {
            Console.WriteLine($"🟢 Storing user in sessionStorage: {email}");
            await JS.InvokeVoidAsync("sessionStorage.setItem", "userEmail", email);
            await JS.InvokeVoidAsync("console.log", "✅ SessionStorage Updated: ", email);
            await JS.InvokeVoidAsync("updateNavMenu"); // 🔄 Trigger NavMenu Update
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid login credentials.";
        }
    }

    private async Task HandleRegistration()
    {
        if (password != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        var success = await AuthService.RegisterAsync(email, password);
        if (success)
        {
            isLoginMode = true;
            errorMessage = "Registration successful. Please log in.";
        }
        else
        {
            errorMessage = "Registration failed. Try again.";
        }
    }
}
